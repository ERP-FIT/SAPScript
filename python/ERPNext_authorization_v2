# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
# MIT License. See license.txt

from __future__ import unicode_literals, print_function
from six import string_types
import frappe, copy, json
from frappe import _, msgprint
from frappe.utils import cint
import frappe.share

rights_map = {"read": 11, "print": 12, "email": 13, "export": 14, "report": 15, "share": 16,
              "create": 21, "write": 22, "delete": 23, "amend": 24, "cancel": 25, "import": 26, "submit": 27}

"""refactor user permission system
core concept:requested authorizations(the doc) against assigned authorizations by multi auth objs
How it works
1. define authorization objects, i.e choose authorization fields
	1.1 add the special action field which is mapped to the user operation on the doc, such as New,change, delete, cancel etc
	1.2 optionally add other to be auth checked fields, multi fields can be assigned per auth object
	1.3 multi fields can be combined using | (OR) operator, 
		e.g owner|approver allows the user to check leave applications which he is owner or approver
	1.4 link field's subfield such as customer.customer_group is supported
	1.5 assign authorizaiton objects to doctype
		1.5.1 multi auth objects can be assigned
		1.5.2 whether mandatory check can be defined per auth obj and doctype
	1.6 optionally auth objects can be assigned to doc field, only one auth object can be assigned to one doctype field	

2. define roles and main authorizations
	2.1 select auth object, select auth field, assign authorized values to the authorization field
	2.2 authorized value rules
		2.2.1 wild card *, which means full authorization on this field
		2.2.2 single fixed value
		2.2.3 single partial fixed value with wildcard
		2.2.4 single variable value link to user master field, using $user. as prefix
		2.2.5 single fixed value for field has descendants, which means it includes all its descendants
		2.2.6 fixed value with range, value from and value to
	2.3 authorization rule:  same key assigned to records of authorization fields of the same auth object
		2.3.1 one auth object can be added to the same role multi times

3. assign roles to user
	3.1 multi roles can be assigned to same user

4. System do authorization check at following point
	4.1 bypass the auth check for globally accessed doctype, the checking is not necessary
	4.2 auth check when user trigger the operation(action) on the target document
		4.2.1 implicit check the relevant doc field by the assigned authorization object
	4.3 when user retrieves multi documents for listing view, report view, link field search, trigger the implicit read action,
		system translate user's authorizations into matching/filering condition,add it to the SQL where clause in db_query
		4.3.1 implicit apply the matching condition of the linked doc type 

use cases:
1. user can display/edit leave applications which he/her is the owner or approver
Solution: define owner|approver as auth field, maintain $user.name as authorization value to the role
use_case1={'auth_objs_fields':{'lap':
			  [['lap_owner','act'                 ],
			  ['lap_owner','owner|leave_approver']]},
		'authorizations':[
			  [16,'lap_owner','act',				 '*',         ''],
			  [16,'lap_owner','owner|leave_approver','$user.name','']],
		'docs':[
			  {'doctype':'lap', 'act':'03','user':'admin','owner':'admin','leave_approver':'fisher'},
			  {'doctype':'lap', 'act':'03','user':'admin','owner':'fisher','leave_approver':'admin'}]
		  }

2. sales user can display/edit only customers which he is the assigned sales person
Solution: define auth obj and assign customer.sales_person as auth field, assign auth obj to doctype customer,
maintain $user.name as authorization value to the role

3. sales user can display/change only sales transactions for customer which he is the assigned sales person
Solution: define auth obj and assign customer.sales_person as auth field, assign auth object to relevant sales transaction doctype,
maintain $user.name as authorization value to the role

4. stock user can create/change/display stock entries of Move-In type, can display stock entries of all types
solution: define type as auth field, create authorizations for the same auth obj,
for 1st authorization, assign create/change to action field, Move-In to type field
for 2nd authorization, assign display to action field, * to type field
"""


def get_auth_objs(doctype, for_field=0):
    auth_key = '%s:%s' %(doctype, for_field)
    return frappe.cache().hget('auth_objs', auth_key, lambda: _get_auth_objs(doctype))


def _get_auth_objs(doctype, for_field=0):
    if for_field:
        sql = """ select auth_obj.name, auth_field.fieldname from `tabDocField` docfield 
                    inner join `tabAuthorization Object` auth_obj on docfield.authorization_object = auth_obj.name
                    inner join `tabAuthorization Field` auth_field on auth_obj.name = auth_field.parent 
                    where docfield.parent = %s"""
    else:
        sql = """ select auth_obj.name, auth_field.fieldname from `tabDoctype Authorization Object` doctype 
            inner join `tabAuthorization Object` auth_obj on doctype.authorization_object = auth_obj.name
            inner join `tabAuthorization Field` auth_field on auth_obj.name = auth_field.parent 
            where doctype.parent = %s"""
    result = frappe.db.sql(sql, doctype)
    return result


def get_user_authorizations(user):
    user_authorizations = frappe.cache().hget(user, 'authorizations', lambda: _get_user_authorizations(user))
    return user_authorizations


def _get_user_authorizations(user):
    sql = """select auth.authorization_id,auth.authorization_object,auth.authorization_field,auth.value_from,auth.value_to
                from `tabHas Role` role inner join `tabRole Authorization` auth on 
                role.role = auth.parent  where role.parent = %s"""
    result = frappe.db.sql(sql, user)
    return result


def get_doctype_authorizations(doctype, act, user=None, usage='doc', auth_obj=None):
    auth_key = '%s:%s:doctype_authorizations' % (doctype,usage)
    return frappe.cache().hget(user, auth_key, lambda: _get_doctype_authorizations(doctype, act, user, usage, auth_obj))


def _get_doctype_authorizations(doctype, act, user=None, usage='doc', auth_obj=None):
        """get authorization records list for the doctype
            0. auth records to be ordered by auth obj, auth ID and auth field
            from operator import itemgetter
            sorted_list = sorted(list_to_sort, key=itemgetter(2,0,1))
            1. usage
                1.1 doctype, returns records which auth field is act,
                1.2 doc: return records which auth field is not act, duplicate records removed, records with wildcard(*)  overwrite others
                1.3 match: fetch records which auth field is not act, duplicate records removed,
                    if exists wildcard(*) records,  retrun empty list
            2. auth_obj: get auth records for specified auth obj, for auth obj assigned to field
        """
        authorizations = get_user_authorizations(user)
        doctype_auth_objs = [auth_obj] if auth_obj else set([j[0] for j in get_auth_objs(doctype)])
        auth_ids = [auth[0] for auth in authorizations if auth[2] == 'act' and auth[1] in doctype_auth_objs
                    and (auth[3] in [act, '*'] or auth[3] <= act <= auth[4] or match(auth[3], act))]
        if not auth_ids:
            return []
        if usage == 'doctype':
            auths = [i for i in authorizations if i[0] in auth_ids and i[2] == 'act']  # only act records
            return auths
        else:
            auths = [i for i in authorizations if i[0] in auth_ids and i[2] != 'act']  # non act records
        if not auths and usage == 'doc':
            return True
        existing_auth = {}  # auth rec without ID field to check duplicate auth records
        auth_id, auth_obj, auth_exclude_id, result = [], [], [], []
        id_wildcard, obj_wildcard = False, False
        count = len(auths)
        for i in range(count):
            if not obj_wildcard:  # bypass following auth ID records of the same auth obj
                auth_id.append(auths[i])
                auth_exclude_id.append(auths[i][1:])
                id_wildcard = True if auths[i][3] == '*' else False
                next_auth_id = auths[i + 1][0] if i < count - 1 else ''
                if auths[i][0] != next_auth_id:
                    auth_exclude_id_str = repr(auth_exclude_id)
                    if auth_exclude_id_str not in existing_auth.keys():
                        existing_auth.update({auth_exclude_id_str: 1})
                        auth_obj.extend(auth_id)
                    if id_wildcard:
                        obj_wildcard = True
                        auth_obj = auth_id  # wildcard auth records overwrite others
                    # id_wildcard = False
                    auth_id = []
                    auth_exclude_id = []
            next_auth_obj = auths[i + 1][1] if i < count - 1 else ''
            if auths[i][1] != next_auth_obj:
                if (usage == 'match' and not obj_wildcard) or usage == 'doc':
                    result.extend(auth_obj)
                obj_wildcard = False
                auth_obj = []
                existing_auth = {}

        return result


def get_auth_key(act, doc='', doctype=''):
    """ for doctype: dcotype:act
        for doc: doctype:field1:field2:act
    """
    if not doc and not doctype:
        return ''
    if not doc:
        return '%s:%s' % (doctype, act)
    else:
        doc_for_auth = {}
        for (auth_obj, auth_field) in get_auth_objs(doc.doctype):
            if auth_field != 'act' and auth_field not in doc_for_auth:
                if '|' in auth_field:
                    field_value = ':'.join([doc.get(field) for field in auth_field.split('|')])
                else:
                    field_value = doc.get(auth_field)
                doc_for_auth[auth_field] = field_value
        auth_key = '%s:%s:%s' % (doc.get('doctype'), ':'.join(doc_for_auth.values()), act)

        return auth_key


def get_descendants(doctype, field, field_value):
    """ support using parent value on the value from """
    f = frappe.get_meta(doctype).get_field(field)
    if f and f.fieldtype == 'Link' and frappe.get_meta(f.options).is_nested_set():
        return frappe.db.get_descendants(f.options, field_value)


def auth_check(doc, act, user, doctype='', trace=0):
    """cached version/wrapper of _auth_check"""
    if not user:
        user = frappe.session.user
    act = rights_map.get(act) if act else '11'
    doctype = doc.get('doctype') if doc else doctype
    if not doctype:
        return False
    auth_key = get_auth_key(act, doc, doctype)
    return frappe.cache().hget(user, auth_key, lambda: _auth_check(doc, act, user, doctype, trace))


def match(first, second):
    """# Python program to match wild card characters
    # The main function that checks if two given strings match.
    # The first string may contain wildcard characters
    """
    # If we reach at the end of both strings, we are done
    if len(first) == 0 and len(second) == 0:
        return True

    # Make sure that the characters after '*' are present
    # in second string. This function assumes that the first
    # string will not contain two consecutive '*'
    if len(first) > 1 and first[0] == '*' and len(second) == 0:
        return False

    # If the first string contains '?', or current characters
    # of both strings match
    if (len(first) > 1 and first[0] == '?') or (len(first) != 0
                                                and len(second) != 0 and first[0] == second[0]):
        return match(first[1:], second[1:])

        # If there is *, then there are two possibilities
    # a) We consider current character of second string
    # b) We ignore current character of second string.
    if len(first) != 0 and first[0] == '*':
        return match(first[1:], second) or match(first, second[1:])

    return False


def check_field(doctype, field, field_value, value_from, value_to=None, user=None):
    """ checking doc field against user's assigned authorizations(via role): value from/value to
        1. wildcard * matches all
        2. wildcard as part of the text, works as like % in SQL
        3. variable field from user master, $user.company, will substitue with current user master field
        4. value from and value to,  works as between(inclusive) in SQL
        5. simple value, works as equal(=) in SQL
        6. for field support hierarchy structure, the descedants included
        7. mutli fields separated by | is treated as OR
    """
    if value_from == '*':
        return True
    if not value_to:
        if any(c in value_from for c in ['*', '?']):
            return match(value_from, field_value)
        else:  # to do handle get descendant
            if '$user.' in value_from:
                value_from = frappe.get_doc('User', user).get(value_from.split('.')[1])
                # value_from = users.get(user).get(value_from.split('.', 1)[1])
            if '|' in field:  # owner|approver multi fields combined by OR logic
                return value_from in field_value

            if field_value == value_from:
                return True
            else:
                descendants = get_descendants(doctype, field, value_from)
                return field_value in descendants if descendants else False
    else:
        return value_from <= field_value <= value_to


def _auth_check(doc, act, user, doctype=None, trace=0):
    """1.doctype level check:only act field is relevant
       2.doc level check:
            2.1 at least one valid auth records exists, to support adding more auth objs later for new user only,
             no impact to existing users without authorizations for new auth obj
            2.2 for doc field with empty value, check is OK
            2.3 Logic of combining all relevant authorizations per each authorizationID
                2.3.1 same authorizationID, same auth obj,different auth field: AND
                2.3.2 different authorizationID, same auth obj: OR
                2.3.3 different authorizationID, different auth obj: AND
                2.3.4 field level auth check: refer to check field documentation
    """
    result = []
    doctype = doc.get('doctype') if doc else doctype
    auth_objs = get_auth_objs(doctype)
    if not auth_objs:  # bypass non auth obj controlled doctype
        return True

    if not doc:
        auths = get_doctype_authorizations(doctype, act, user, usage='doctype')
        return len(auths) > 0
    else:
        auths = get_doctype_authorizations(doctype, act, user, usage='doc')
        auth_objs = [i for i in auth_objs if i[1] != 'act']
        if not auth_objs:  # only act auth field defined for the auth obj
            return auths
        else:
            pre_auth_obj = ''
            for (auth_obj, auth_field) in auth_objs:
                # multi auth objs to be checked by AND logic in SQL where clause
                if auth_obj != pre_auth_obj:
                    result = []
                else:
                    pre_auth_obj = auth_obj
                obj_auths = [auth for auth in auths if auth[1] == auth_obj]
                if not obj_auths:
                    continue
                if '|' in auth_field:
                    check_value = [doc.get(field) for field in auth_field.split('|')]
	        elif '.' in auth_field:
                    link_field, sub_field =auth_field.split('.', 1)
                    link_doctype = frappe.get_meta(doctype).get_link_doctype(link_field)
                    check_value = frappe.get_doc(link_doctype, link_field).get(sub_field)
                else:
                    check_value = doc.get(auth_field)  # act if auth_field=='act' else
                if not check_value:  # bypass checking empty to be checked doc field
                    auth = [i[0] for i in obj_auths if i[2] == auth_field]
                else:
                    auth = [i[0] for i in obj_auths if
                            i[2] == auth_field and check_field(doctype, auth_field, check_value, i[3], i[4], user)]
                if not auth:
                    return False
                else:
                    result = set(result) & set(auth) if result else set(auth)
                if not result:
                    return False
            return len(result) > 0


def get_match_conditions(doctype, act='read', user=None,table_alias=None):
    """" cached version of _get_match_condition"""
    auth_key = '%s:match_condition' % doctype
    return frappe.cache().hget(user, auth_key, lambda: _get_match_conditions(doctype, act, user))


def _get_match_conditions(doctype, act='read', user=None, tables=[], parent_doctype=None):
    """ apply auth relevant restriction to db_query's where condition, which is called by via get_list/get_all or report query
        for logic details, please check the _auth_check documentation
	tables:[table1,field1,table2,field2,table1_alias,table2_alias] from db_query
	parent_doctype: used for fetching child doctype's match condition to determine correct table alias
	return: where condition, prefixed with table alias, also the tables list, to be used by db_query to build correct join clause
    """
    def build_condition(auth, table_alias):
        """generate SQL where condition per auth record for single field"""
        auth_field, value_from, value_to = auth[2] , auth[3], auth[4]
	if '.' in auth_field:	# get the actual field name
		auth_field = auth_field.split('.')[-1]
	# add table alias as prefix, considering composite field splitted by |
        auth_field = '|'.join(['%s.%s' % (table_alias, i) for i in auth_field.split('|')])
        if value_from and value_to:
            condition = "%s between '%s' and '%s'" % (auth_field, value_from, value_to)
        elif '*' in value_from:
            condition = "%s like '%s'" % (auth_field, value_from.replace('*', '%'))
        else:
            if '$user.' in value_from:
                value_from = frappe.get_doc('User', user).get(value_from.split('.')[1])
            descendants = get_descendants(doctype, auth_field, value_from)
            if not descendants:
                condition = "%s = '%s'" % (auth_field, value_from)
            else:
                condition = "%s in (%s)" % (auth_field, ','.join(["'%s'" % j for j in descendants]))
        # a|b between "c" and "d" => a between "c" and "d" or b between "c" and "d"
        if '|' in auth_field:
            condition_value = condition.replace(auth_field,'')
            condition = ' or '.join(["%s%s" % (k, condition_value) for k in auth_field.split('|')])
        return condition

    auths = get_doctype_authorizations(doctype, act, user, usage='match')
    result = ''
    count = len(auths)
    table_alias = table_alias if table_alias else '`tab%s`' % doctype
    for i in range(count):
        pre_auth_id = auths[i - 1][0] if i > 0 else ''
        pre_auth_obj = auths[i - 1][1] if i > 0 else ''
        pre_auth_field = auths[i - 1][2] if i > 0 else ''
        if auths[i][1] != pre_auth_obj:
            if i == 0:
                result = '('
            else:
                result += ' and ('
        else:
            if auths[i][0] != pre_auth_id:
                result += ' or '
        if auths[i][0] != pre_auth_id:
            result += '('
        else:
            if auths[i][2] != pre_auth_field:
                result += ' and '
        if auths[i][2] != pre_auth_field:
            result += '('
        else:
            result += ' or '
	auth_field = auths[2]
	table2_alias = tables[0] if tables else '`tab%s`' % doctype
	if parent_doctype:	# make sure child table already joined
		child_table =[i for i in tables if i[2] == '`tab%s`' % doctype]		
		if child_table:
			table2_alias = child_table[5]
		else:
			table1 = "`tab%s`" %(parent_doctype)
			table2_alias = '`%s_%s` %(parent_doctype, auth_field)
			table =[table1, "name", "`tab%s`" % (doctype), "parent", table1, table2_alias]
			tables.append(table)	
	if '.' in auth_field:	# handle 1 level link field's subfield
        	link_field, sub_field =auth_field.split('.', 1)
        	link_doctype = frappe.get_meta(doctype).get_link_doctype(link_field)
		link_table_name = `tab%s` % link_doctype
		link_table = [i for i in tables if i[2] == link_table_name]
		if link_table:
			table2_alias = link_table[5]
		else:
			table1 = "`tab%s`" %(doctype)
			table1_alias = table2_alias if parent_doctype else table1
			table2_alias = '`%s_%s`' %(doctype, link_field)
			table = [table1, link_field, link_table_name, "name", table1, table2_alias]
			tables.append(table)
        field_condition = build_condition(auths[i], table2_alias)
        result += field_condition
        next_auth_id = auths[i + 1][0] if i < count - 1 else ''
        next_auth_obj = auths[i + 1][1] if i < count - 1 else ''
        next_auth_field = auths[i + 1][2] if i < count - 1 else ''
        if auths[i][2] != next_auth_field:
            result += ')'
        if auths[i][0] != next_auth_id:
            result += ')'
        if auths[i][1] != next_auth_obj:
            result += ')'

    return (result, tables)
